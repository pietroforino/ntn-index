---
import { getProjects } from "../data/strapi";

import Analytics from "@vercel/analytics/astro";
import SpeedInsights from "@vercel/speed-insights/astro";

import { createSignal } from "solid-js";
import Lightbox from "../components/Lightbox.astro";

const projects: {
  images: { url: string }[];
  main_image: { formats: { medium: { url: string } } };
  title: string;
  code: string;
  year: number;
  interior?: boolean;
  exhibition?: boolean;
  objects?: boolean;
  graphic?: boolean;
  research?: boolean;
  urbanism?: boolean;
}[] = await getProjects();

// Stato del lightbox con Signals di Solid.js (supportato nativamente da Astro)
const [isOpen, setIsOpen] = createSignal(false);
const [imageSrc, setImageSrc] = createSignal("");
const [description, setDescription] = createSignal("");

interface Project {
  main_image: { formats: { medium: { url: string } } };
  title: string;
}
---

<html lang="it">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, user-scalable=no, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0"
    />
  </head>
  <body>
    <slot />
  </body>
</html>

<script is:inline>
  const handleMouseEnter = (event) => {
    const row = event.currentTarget;
    const img = row.querySelector(".img");
    const rect = img.getBoundingClientRect();
    const viewportHeight = window.innerHeight;

    if (rect.bottom > viewportHeight) {
      img.style.top = "auto";
      img.style.bottom = "1.75rem";
    } else {
      img.style.top = "1.75rem";
      img.style.bottom = "auto";
    }
  };

  const handleMouseLeave = (event) => {
    const row = event.currentTarget;
    const img = row.querySelector(".img");
    img.style.top = "1.75rem";
    img.style.bottom = "auto";
  };

  const handleMouseClick = (event) => {
    const row = event.currentTarget;
    const images = JSON.parse(row.getAttribute("data-images"));
    openLightbox(images, row);
    console.log(images);
  };

  let lightboxOpen = false;

  document.addEventListener("DOMContentLoaded", () => {
    const rows = document.querySelectorAll(".row");
    rows.forEach((row) => {
      row.addEventListener("mouseenter", handleMouseEnter);
      row.addEventListener("mouseleave", handleMouseLeave);

      // row.addEventListener('click', handleMouseClick);

      row.addEventListener("click", (event) => {
        if (lightboxOpen) {
          return; // Se il lightbox è già aperto, non fare nulla
        }
        lightboxOpen = true; // Imposta il flag per indicare che il lightbox è aperto
        event.stopPropagation(); // Evita che il click si propaghi alla riga
        const lightbox = event.target.querySelector(".lightbox-overlay");
        document.querySelectorAll(".row").forEach((r) => {
          r.classList.remove("open");
          r.classList.add("hided");
        });
        event.target.classList.add("open");
        if (lightbox) {
          lightbox.style.display = "flex";
          currentIndex = 0;
          updateImage();
        }
      });

      const prevButton = row.querySelector(".lightbox-arrow.prev");
      const nextButton = row.querySelector(".lightbox-arrow.next");
      const imagesElement = row.querySelectorAll(".lightbox-image");

      let currentIndex = 0;

      function updateImage() {
        if (imagesElement.length > 1) {
          imagesElement.forEach((img, index) => {
            img.style.display = index === currentIndex ? "block" : "none";
          });
        }
      }

      prevButton.addEventListener("click", (event) => {
        event.stopPropagation(); // Prevent closing the lightbox
        currentIndex =
          (currentIndex - 1 + imagesElement.length) % imagesElement.length;
        updateImage();
      });

      nextButton.addEventListener("click", (event) => {
        event.stopPropagation(); // Prevent closing the lightbox
        currentIndex = (currentIndex + 1) % imagesElement.length;
        updateImage();
      });

      const closeButton = row.querySelector(".lightbox-close");
      if (closeButton) {
        closeButton.addEventListener("click", (event) => {
          event.stopPropagation(); // Evita che il click si propaghi alla riga
          const lightbox = row.querySelector(".lightbox-overlay");
          document.querySelectorAll(".row").forEach((r) => {
            r.classList.remove("open");
            r.classList.remove("hided");
          });
          if (lightbox) {
            lightbox.style.display = "none"; // Nascondi la lightbox
            lightboxOpen = false;
          }
        });
      }
    });
  });
</script>

<main>
  <div class="menu">
    <img src="ntn_logo.svg" alt="" />
  </div>
  <div class="container">
    {
      [...projects]
        .sort((a, b) => a.year - b.year)
        .map((project, index) => {
          // Raccolta immagini (main + gallery)
          const mainImageUrl = project.main_image.url;
          const galleryImages = (project.gallery || []).map((img) => img.url);
          const allImages = [mainImageUrl, ...galleryImages];

          return (
            <div
              class="row"
              id={`row-${index}`}
              data-images={JSON.stringify(allImages)}
            >
              <img
                class="img"
                src={mainImageUrl}
                alt={project.title}
                srcset={`
              ${project.main_image.formats.small?.url} 500w,
              ${project.main_image.formats.medium?.url} 750w,
              ${project.main_image.formats.large?.url} 1000w
            `}
                sizes="(max-width: 600px) 500px, 
                   (max-width: 900px) 750px, 
                   1000px"
              />
              <div class="left" style="pointer-events: none;">
                <div>
                  <p>{project.code}</p>
                  <p>{project.year}</p>
                </div>
                <p>{project.title}</p>
              </div>
              <div class="right" style="pointer-events: none;">
                <div class={`field ${project.interior ? "active" : ""}`} />
                <div class={`field ${project.exhibition ? "active" : ""}`} />
                <div class={`field ${project.objects ? "active" : ""}`} />
                <div class={`field ${project.graphic ? "active" : ""}`} />
                <div class={`field ${project.research ? "active" : ""}`} />
                <div class={`field ${project.urbanism ? "active" : ""}`} />
              </div>
              <div class="hide-mobile" />

              <div class="lightbox-overlay" style="display: none;">
                <button class="lightbox-close">
                  <img src="close-icon.svg" alt="" />
                </button>
                <button class="lightbox-arrow prev">
                  <img src="arrow-left.svg" alt="" />
                </button>
                <div class="lightbox-content">
                  {allImages.map((image, imgIndex) => (
                    <img
                      key={imgIndex}
                      src={image}
                      alt={`Image ${imgIndex + 1} of ${project.title}`}
                      class="lightbox-image"
                    />
                  ))}
                </div>
                <button class="lightbox-arrow next">
                  <img src="arrow-right.svg" alt="" />
                </button>
              </div>
            </div>
          );
        })
    }
  </div>
</main>

<Analytics />
<SpeedInsights />


<style lang="scss">

  .menu {
    padding: 0.5rem;
  }

  .lightbox-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1;
  }

  .lightbox-content {
    text-align: center;
    position: relative;
    max-width: 100%;
    padding: 10px;
    max-height: 80vh;
    aspect-ratio: 1 / 1;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
  }

  .lightbox-content img {
    max-width: 100%;
    max-height: 100%;
    user-select: none;
  }

  .lightbox-close {
    position: absolute;
    top: 0px;
    right: 0px;
    background: none;
    border: none;
    font-size: 1.5rem;
    line-height: 1;
    cursor: pointer;
    color: black;
  }

  .lightbox-arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    border: none;
    font-size: 2rem;
    cursor: pointer;
    padding: 0px;
    z-index: 100;
    background-color: transparent;
  }

  .lightbox-arrow.prev {
    left: 5px;
  }

  .lightbox-arrow.next {
    right: 5px;
  }

  p {
    margin: 0;
    font-family: monospace;
    font-size: 0.8rem;
  }

  body {
    margin: 0;
  }

  main {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    min-height: 100vh;
  }
  .container {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    flex-direction: column;
    padding: 0.5rem;
    padding-bottom: 0;
    // background: white;

    &:hover {
      .row {
        p {
          // color: #00000080 !important
        }
      }
    }

    .labels {
      display: flex;
      gap: 5vw;
      flex-direction: row;
      justify-content: flex-end;
      width: 100%;

      div {
        width: 5px;

        p {
          writing-mode: sideways-lr;
          text-orientation: mixed;
          line-height: 1;
          transform: rotate(45deg);
          text-transform: uppercase;
        }
      }
    }

    .row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      width: 100%;
      position: relative;
      padding: 0.25rem 0;

      &.hided {
        opacity: 0.25;

        .img {
          display: none !important;
        }

        &:hover {
          p {
            color: black !important;
          }
        }
      }

      &.open {
        opacity: 1;
      }

      &:hover {
        p {
          color: rgb(255, 102, 0) !important;
        }

        .img {
          display: block;
          position: absolute;
          top: 0;
          left: 0;
          max-width: 300px;
          pointer-events: none;
          z-index: 100;
        }
      }

      .img {
        display: none;
      }

      .left {
        display: flex;
        justify-content: flex-start;
        align-items: flex-start;
        flex-direction: row;
        gap: 2vw;
        width: 50vw;
        z-index: 100;

        div {
          display: flex;
          flex-direction: row;
          gap: 2vw;
          pointer-events: none;
        }

        p {
          cursor: pointer;
          color: black;
        }
      }

      .right {
        display: flex;
        justify-content: flex-end;
        align-items: flex-start;
        flex-direction: row;
        gap: 5vw;
        pointer-events: none;

        .field {
          width: 5px;
          height: 5px;
          background-color: white;
          margin: 0;
          border-radius: 100%;

          &.active {
            background-color: black;
          }
        }
      }
    }

    #row-0 {
      .right {
        .field {
          position: relative;

          &::before {
            writing-mode: sideways-lr;
            text-orientation: mixed;
            line-height: 1;
            transform: rotate(45deg);
            text-transform: uppercase;
            margin: 0;
            font-family: monospace;
            font-size: 0.8rem;
            position: absolute;
            bottom: 1rem;
            left: 0.75rem;
            pointer-events: none;
            height: 70px;
          }

          &:nth-child(1)::before {
            content: "interior";
          }

          &:nth-child(2)::before {
            content: "exhibitions";
          }

          &:nth-child(3)::before {
            content: "objects";
          }

          &:nth-child(4)::before {
            content: "graphic";
          }

          &:nth-child(5)::before {
            content: "research";
          }

          &:nth-child(6)::before {
            content: "urbanism";
          }
        }
      }
    }
  }

  @media (max-width: 720px) {
    .left {
      display: flex;
      justify-content: flex-start;
      align-items: flex-start;
      flex-direction: row;
      gap: 2vw;
      width: 70vw !important;
      z-index: 100;

      div {
        display: flex;
        flex-direction: column !important;
        gap: 0.25vw !important;
        pointer-events: none;
      }

      p {
        cursor: pointer;
        color: black;
      }
    }
    
    .hide-mobile {
      display: none;
    }

    .row {
      .img {
        display: none !important
      }
    }

    .lightbox-arrow {
      transform: scale(0.5);
    }

    #row-0 {
      .right {
        .field {
          &::before {
            transform: translateX(-50%) rotate(0deg) !important;
            left: 3px !important;
          }
        }
      }
    }
    .labels div p {
      transform: rotate(90deg);
    }
  }
</style>
