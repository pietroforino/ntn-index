---
import "../css/style.scss";
import { getOrderedProjects } from "../data/strapi";

import Menu from "../components/Menu.astro";
import Analytics from "@vercel/analytics/astro";
import SpeedInsights from "@vercel/speed-insights/astro";
import { AstroSeo } from "@astrolib/seo";

const projects: {
  gallery: {
    [x: string]: any;
    url: any;
    formats: { medium: { url: string } };
  };
  description: string;
  active: any;
  images: { url: string }[];
  main_image: {
    url: any;
    formats: { medium: { url: string } };
  };
  title: string;
  code: string;
  year: number;
  rank?: number;
  spaces?: boolean;
  objects?: boolean;
  graphic?: boolean;
  research?: boolean;
  urbanism?: boolean;
}[] = await getOrderedProjects();

interface Project {
  main_image: { formats: { medium: { url: string } } };
  title: string;
}
---

<html lang="it">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, user-scalable=no, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=0"
    />

    <AstroSeo
      title="NTNINDEX - Antonio Cioppa | Architect in Milan"
      description="Architect Antonio Cioppa (1991), Milan-based, works across interiors, installations, product & graphic design with a radical industrial grammar."
      canonical="https://www.ntnindex.com/"
      openGraph={{
        url: "https://www.ntnindex.com/",
        title: "NTNINDEX - Antonio Cioppa | Architect in Milan",
        description:
          "Architect Antonio Cioppa (1991), Milan-based, works across interiors, installations, product & graphic design with a radical industrial grammar.",
        images: [
          {
            url: "https://www.ntnindex.com/pixel.jpg",
            width: 800,
            height: 600,
            alt: "Og Image Alt",
            type: "image/jpeg",
          },
        ],
        site_name: "NTNINDEX",
      }}
    />

    <script>
      (function () {
        try {
          const saved = localStorage.getItem("theme");
          if (saved === "night") {
            document.documentElement.dataset.theme = "night";
          } else {
            document.documentElement.dataset.theme = "day";
          }
        } catch (e) {}
      })();
    </script>
  </head>
  <body>
    <script is:inline>
      const handleMouseEnter = (event) => {
        if (lightboxOpen) {
          return;
        }
        const row = event.currentTarget;

        const img = row.querySelector(".img");

        img.style.top = "auto";
        img.style.bottom = "1.75rem";
      };

      const handleMouseLeave = (event) => {
        const row = event.currentTarget;
        const img = row.querySelector(".img");
        img.style.top = "1.75rem";
        img.style.bottom = "auto";
      };

      let lightboxOpen = false;

      let catOpen = null;

      document.addEventListener("DOMContentLoaded", () => {
        const categories = document.querySelectorAll(".row.categories div");
        categories.forEach((category) => {
          category.addEventListener("click", (event) => {
            event.stopPropagation();
            const label = category.querySelector("p");
            const selected = label.textContent.toLowerCase();
            document
              .querySelectorAll(".row.categories p.cat-active")
              .forEach((p) => {
                p.classList.remove("cat-active");
              });

            if (label.textContent == catOpen) {
              catOpen = null;

              document.querySelectorAll(".row.clickable").forEach((row) => {
                row.classList.remove("off-cat");
              });
            } else {
              catOpen = label.textContent;
              label.classList.add("cat-active");
              document.querySelectorAll(".row.clickable").forEach((row) => {
                if (row.dataset[selected] !== "true") {
                  row.classList.add("off-cat");
                } else {
                  row.classList.remove("off-cat");
                }
              });
            }
          });
        });

        const rows = document.querySelectorAll(".row.clickable");
        rows.forEach((row) => {
          row.addEventListener("mouseenter", handleMouseEnter);
          row.addEventListener("mouseleave", handleMouseLeave);

          row.addEventListener("click", (event) => {
            if (lightboxOpen) {
              return;
            }
            lightboxOpen = true;

            document.querySelector(".menu").style.pointerEvents = "none";
            document.querySelector(".menu").style.opacity = "0.25";

            event.stopPropagation();
            const lightbox = event.target.querySelector(".lightbox-overlay");
            document.querySelectorAll(".row").forEach((r) => {
              r.classList.remove("open");
              r.classList.add("hided");
            });
            event.target.classList.add("open");
            event.target.classList.remove("hided");
            if (lightbox) {
              lightbox.style.display = "flex";
              currentIndex = 0;
              updateImage();
            }
          });

          const prevButton = row.querySelector(".lightbox-arrow.prev");
          const nextButton = row.querySelector(".lightbox-arrow.next");
          const imagesElement = row.querySelectorAll(".lightbox-image");

          let currentIndex = 0;

          function updateImage() {
            if (imagesElement.length > 1) {
              imagesElement.forEach((img, index) => {
                img.style.display = index === currentIndex ? "block" : "none";
              });
            }
          }

          prevButton.addEventListener("click", (event) => {
            event.stopPropagation();
            currentIndex =
              (currentIndex - 1 + imagesElement.length) % imagesElement.length;
            updateImage();
          });

          nextButton.addEventListener("click", (event) => {
            event.stopPropagation();
            currentIndex = (currentIndex + 1) % imagesElement.length;
            updateImage();
          });

          const close = (e) => {
            e.stopPropagation();
            const lightbox = row.querySelector(".lightbox-overlay");
            document.querySelectorAll(".row").forEach((r) => {
              r.classList.remove("open");
              r.classList.remove("hided");
            });
            if (lightbox) {
              lightbox.style.display = "none";
              lightboxOpen = false;

              document.querySelector(".menu").style.pointerEvents = "all";
              document.querySelector(".menu").style.opacity = "1";
              document.querySelectorAll(".info").forEach((e) => {
                e.classList.remove("show");
              });
            }
          };

          document.addEventListener("keydown", (event) => {
            if (event.key === "Escape") {
              close(event);
            } else if (event.key === "ArrowLeft") {
              if (lightboxOpen) {
                currentIndex =
                  (currentIndex - 1 + imagesElement.length) %
                  imagesElement.length;
                updateImage();
              }
            } else if (event.key === "ArrowRight") {
              if (lightboxOpen) {
                currentIndex = (currentIndex + 1) % imagesElement.length;
                updateImage();
              }
            }
          });

          // document.addEventListener("click", (event) => {
          //   close(event);
          // });

          const closeButton = row.querySelector(".lightbox-close");
          if (closeButton) {
            closeButton.addEventListener("click", (event) => {
              close(event);
            });
          }

          const plusButton = row.querySelector(".lightbox-plus");
          if (plusButton) {
            plusButton.addEventListener("click", () => {
              if (row.querySelector(".info").classList.contains("show")) {
                plusButton.querySelector("img").src = "plus-icon.svg";
                row.querySelector(".info").classList.remove("show");
              } else {
                plusButton.querySelector("img").src = "minus-icon.svg";
                row.querySelector(".info").classList.add("show");
              }
            });
          }
        });
      });
    </script>

    <main>
      <Menu />
      <div class="container">
        <div class="row categories">
          <div class="left"></div>
          <div class="right">
            <div class="labels">
              <div><p>Spaces</p></div>
              <div><p>Objects</p></div>
              <div><p>Graphic</p></div>
              <div><p>Research</p></div>
              <div><p>Macro</p></div>
            </div>
          </div>
          <div class="hide-mobile"></div>
        </div>
        <div style="width: 100%;">
          {
            [...projects].map((project, index) => {
              const mainImageUrl = project.main_image.url;
              const galleryImages = (project.gallery || []).map(
                (img: { url: any }) => img.url
              );
              const allImages = [mainImageUrl, ...galleryImages];

              return (
                <div
                  class={`row ${project.active ? "clickable" : "off"}`}
                  id={`row-${index}`}
                  data-spaces={project.spaces}
                  data-objects={project.objects}
                  data-graphic={project.graphic}
                  data-research={project.research}
                  data-macro={project.urbanism}
                  data-images={JSON.stringify(allImages)}
                >
                  <img class="img" src={mainImageUrl} alt={project.title} />
                  <div class="left" style="pointer-events: none;">
                    <div>
                      <p>{project.code}</p>
                      <p>{project.year}</p>
                    </div>
                    <p>{project.title}</p>
                  </div>
                  <div class="right" style="pointer-events: none;">
                    <div class={`field ${project.spaces ? "active" : ""}`} />
                    <div class={`field ${project.objects ? "active" : ""}`} />
                    <div class={`field ${project.graphic ? "active" : ""}`} />
                    <div class={`field ${project.research ? "active" : ""}`} />
                    <div class={`field ${project.urbanism ? "active" : ""}`} />
                  </div>
                  <div class="hide-mobile" />

                  <div class="lightbox-overlay" style="display: none;">
                    <button class="lightbox-close">
                      <img src="close-icon.svg" alt="" />
                    </button>
                    {project.description && (
                      <button class="lightbox-plus">
                        <img src="plus-icon.svg" alt="" />
                      </button>
                    )}

                    <button
                      class="lightbox-arrow prev"
                      style={`${allImages.length <= 1 && "opacity: 0"}`}
                    >
                      <img src="arrow-left.svg" alt="" />
                    </button>
                    <div class="lightbox-content">
                      {allImages.map((image, imgIndex) => (
                        <img
                          src={image}
                          alt={`Image ${imgIndex + 1} of ${project.title}`}
                          class="lightbox-image"
                        />
                      ))}
                    </div>
                    <button
                      class="lightbox-arrow next"
                      style={`${allImages.length <= 1 && "opacity: 0"}`}
                    >
                      <img src="arrow-right.svg" alt="" />
                    </button>
                  </div>
                  <div class="info">
                    <p>{project.description}</p>
                  </div>
                </div>
              );
            })
          }
        </div>
      </div>
    </main>
  </body>
</html>

<Analytics />
<SpeedInsights />
