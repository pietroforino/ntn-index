---
import '../css/style.scss'
import { getProjects } from "../data/strapi";

import Menu from '../components/Menu.astro';
import Analytics from "@vercel/analytics/astro";
import SpeedInsights from "@vercel/speed-insights/astro";

const projects: {
  images: { url: string }[];
  main_image: { formats: { medium: { url: string } } };
  title: string;
  code: string;
  year: number;
  rank?: number;
  spaces?: boolean;
  objects?: boolean;
  graphic?: boolean;
  research?: boolean;
  urbanism?: boolean;
}[] = await getProjects();

interface Project {
  main_image: { formats: { medium: { url: string } } };
  title: string;
}
---

<html lang="it">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, user-scalable=no, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=0"
    />
  </head>
  <body>
    <!-- <slot /> -->

<script is:inline>
  const handleMouseEnter = (event) => {
    const row = event.currentTarget;
    
    const img = row.querySelector(".img");
    const rect = img.getBoundingClientRect();
    const viewportHeight = window.innerHeight;

         img.style.top = "auto";
      img.style.bottom = "1.75rem";

    // // if (rect.bottom > viewportHeight) {
    //   img.style.top = "auto";
    //   img.style.bottom = "1.75rem";
    // } else {
      // img.style.top = "1.75rem";
      // img.style.bottom = "auto";
    // }
  };

  const handleMouseLeave = (event) => {
    const row = event.currentTarget;
    const img = row.querySelector(".img");
    img.style.top = "1.75rem";
    img.style.bottom = "auto";
  };

  let lightboxOpen = false;

  let catOpen = null;

  document.addEventListener("DOMContentLoaded", () => {
    
    const categories = document.querySelectorAll(".row.categories div");
    categories.forEach((category) => {
      category.addEventListener("click", (event) => {
        event.stopPropagation();
        const label = category.querySelector("p");
        const selected = label.textContent.toLowerCase();

        document.querySelectorAll(".row.categories p.cat-active").forEach((p) => {
            p.classList.remove("cat-active");
          });

        if (label.textContent == catOpen) {
          catOpen = null;

          
          
          document.querySelectorAll(".row.clickable").forEach((row) => {
            row.classList.remove("off");
            
            // label.classList.remove('cat-active')
          });
        } else {
          catOpen = label.textContent;
          label.classList.add('cat-active')
          document.querySelectorAll(".row.clickable").forEach((row) => {
            if (row.dataset[selected] !== "true") {
              row.classList.add("off");
            } else {
              row.classList.remove("off");
            }
          });
        }
      });
    });

    const rows = document.querySelectorAll(".row.clickable");
    rows.forEach((row) => {
      row.addEventListener("mouseenter", handleMouseEnter);
      row.addEventListener("mouseleave", handleMouseLeave);

      row.addEventListener("click", (event) => {
        if (lightboxOpen) {
          return;
        }
        lightboxOpen = true;
        event.stopPropagation();
        const lightbox = event.target.querySelector(".lightbox-overlay");
        document.querySelectorAll(".row").forEach((r) => {
          r.classList.remove("open");
          r.classList.add("hided");
        });
        event.target.classList.add("open");
        if (lightbox) {
          lightbox.style.display = "flex";
          currentIndex = 0;
          updateImage();
        }
      });

      const prevButton = row.querySelector(".lightbox-arrow.prev");
      const nextButton = row.querySelector(".lightbox-arrow.next");
      const imagesElement = row.querySelectorAll(".lightbox-image");

      let currentIndex = 0;

      function updateImage() {
        if (imagesElement.length > 1) {
          imagesElement.forEach((img, index) => {
            img.style.display = index === currentIndex ? "block" : "none";
          });
        }
      }

      prevButton.addEventListener("click", (event) => {
        event.stopPropagation(); // Prevent closing the lightbox
        currentIndex =
          (currentIndex - 1 + imagesElement.length) % imagesElement.length;
        updateImage();
      });

      nextButton.addEventListener("click", (event) => {
        event.stopPropagation(); // Prevent closing the lightbox
        currentIndex = (currentIndex + 1) % imagesElement.length;
        updateImage();
      });

      const closeButton = row.querySelector(".lightbox-close");
      if (closeButton) {
        closeButton.addEventListener("click", (event) => {
          event.stopPropagation(); // Evita che il click si propaghi alla riga
          const lightbox = row.querySelector(".lightbox-overlay");
          document.querySelectorAll(".row").forEach((r) => {
            r.classList.remove("open");
            r.classList.remove("hided");
          });
          if (lightbox) {
            lightbox.style.display = "none"; // Nascondi la lightbox
            lightboxOpen = false;
          }
        });
      }
    });
  });
</script>

<main>
  <Menu/>
  <div class="container">
    <div class="row categories">
      <div class="left"></div>
      <div class="right" >
        <div class="labels">
          <div><p>Spaces</p></div>
          <div><p>Objects</p></div>
          <div><p>Graphic</p></div>
          <div><p>Research</p></div>
          <div><p>Urbanism</p></div>
        </div>
      </div>
      <div class="hide-mobile" />
    </div>
    {
      [...projects]
        .sort((a, b) => a.rank - b.rank)
        .map((project, index) => {
          // Raccolta immagini (main + gallery)
          const mainImageUrl = project.main_image.url;
          const galleryImages = (project.gallery || []).map((img) => img.url);
          const allImages = [mainImageUrl, ...galleryImages];

          return (
            <div
              class={`row ${project.active ? "clickable" : "off"}`}
              id={`row-${index}`}
              data-spaces={project.spaces}
              data-objects={project.objects}
              data-graphic={project.graphic}
              data-research={project.research}
              data-urbanism={project.urbanism}
              data-images={JSON.stringify(allImages)}
            >
              <img
                class="img"
                src={mainImageUrl}
                alt={project.title}
              />
              <div class="left" style="pointer-events: none;">
                <div>
                  <p>{project.code}</p>
                  <p>{project.year}</p>
                </div>
                <p>{project.title}</p>
              </div>
              <div class="right" style="pointer-events: none;">
                <div class={`field ${project.spaces ? "active" : ""}`} />
                <div class={`field ${project.objects ? "active" : ""}`} />
                <div class={`field ${project.graphic ? "active" : ""}`} />
                <div class={`field ${project.research ? "active" : ""}`} />
                <div class={`field ${project.urbanism ? "active" : ""}`} />
              </div>
              <div class="hide-mobile" />

              <div class="lightbox-overlay" style="display: none;">
                <button class="lightbox-close">
                  <img src="close-icon.svg" alt="" />
                </button>
                <button class="lightbox-arrow prev">
                  <img src="arrow-left.svg" alt="" />
                </button>
                <div class="lightbox-content">
                  {allImages.map((image, imgIndex) => (
                    <img
                      key={imgIndex}
                      src={image}
                      alt={`Image ${imgIndex + 1} of ${project.title}`}
                      class="lightbox-image"
                    />
                  ))}
                </div>
                <button class="lightbox-arrow next">
                  <img src="arrow-right.svg" alt="" />
                </button>
              </div>
            </div>
          );
        })
    }
  </div>
</main>
  </body>
</html>

<Analytics />
<SpeedInsights />
